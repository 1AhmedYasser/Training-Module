getFileLocations:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/return-file-locations"
  result: fileLocations

getRulesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.rules_location}
  result: ruleFile

getRulesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json"
    body:
      file: ${ruleFile.response.body.file}
  result: rulesData

getStoriesFile:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/file/read"
    body:
      file_path: ${fileLocations.response.body.response.stories_location}
  result: storiesFile

getStoriesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/yaml-to-json"
    body:
      file: ${storiesFile.response.body.file}
  result: storiesData

getResponses:
  call: http.get
  args:
    url: "[#TRAINING_OPENSEARCH]:[#TRAINING_OPENSEARCH_PORT]/domain/_search?size=10000"
  result: getResponsesResult

mapResponsesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-responses"
    body:
      hits: ${getResponsesResult.response.body.hits.hits}
  result: responsesData

mapDependenciesData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/get-responses-dependencies"
    body:
      rules: ${rulesData.response.body.rules}
      stories: ${storiesData.response.body.stories}
      responses: ${responsesData.response.body.data.responses}
  result: dependenciesData

returnSuccess:
  return: ${dependenciesData.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
