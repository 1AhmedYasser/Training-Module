assignValues:
  assign:
    fileName: ${incoming.params.fileName}
    emptyReport: {}

validateName:
  switch:
    - condition: ${fileName.trim().length !== 0}
      next: getReportFromDb
  next: returnEmptyObject

getReportFromDb:
  call: http.post
  args:
    url: "[#TRAINING_RESQL]/get-llm-model-report-by-filename"
    body:
      fileName: ${fileName}
  result: dbResult

validateRecordExists:
  switch:
    - condition: ${dbResult.response.body.length !== 0}
      next: returnSuccess
  next: returnEmptyObject

mapReport:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-intent-report"
    body:
      keys: ${Object.keys(JSON.parse(dbResult.response.body[0].testReport.value))}
      object: ${JSON.parse(dbResult.response.body[0].testReport.value)}
  result: fileResult

returnSuccess:
  return: ${JSON.parse(dbResult.response.body[0].testReport.value)}
  wrapper: true
  next: end

returnEmptyObject:
  return: ${JSON.parse(emptyReport)}
  wrapper: false
  next: end

checkEntity:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/checkV"
    body:
      hits: ${dbResult.response.body[0]}
  result: fileResult