assign_values:
  assign:
    responseName: ${incoming.body.response_name}
    responseText: ${incoming.body.response_text}

extractRequestData:
  assign:
    cookie: ${incoming.headers.cookie}

extractTokenData:
  call: http.post
  args:
    url: http://localhost:8080/mock-tim-custom-jwt-userinfo
    headers:
      cookie: ${cookie}
    body:
      # TODO: pass cookie name correctly to TIM
      cookieName: "customJwtCookie"
  result: jwtResult

validateAdministrator:
  switch:
    - condition: ${jwtResult.response.body.response.authorities.includes("ROLE_ADMINISTRATOR")}
      next: validateValues
  next: returnUnauthorized

validateValues:
  switch:
    # TODO: use correct structure when request is made against TIM
    - condition: ${responseName.length > 0 && responseText.length > 0}
      next: getResponsesWithNameAndText
    - condition: ${responseName.length > 0}
      next: getResponsesWithName
    - condition: ${responseText.length > 0}
      next: getResponsesWithText
  next: getResponses

getResponsesWithNameAndText:
  call: http.post
  args:
    url: http://host.docker.internal:9200/response/_search
    body:
      query:
        bool:
          must:
            - match:
                name: ${responseName}
            - match:
                text: ${responseText}
  result: getResponsesResult
  next: mapResponsesData

getResponsesWithName:
  call: http.post
  args:
    url: http://host.docker.internal:9200/response/_search
    body:
      query:
        bool:
          must:
            - match:
                name: ${responseName}
  result: getResponsesResult
  next: mapResponsesData

getResponsesWithText:
  call: http.post
  args:
    url: http://host.docker.internal:9200/response/_search
    body:
      query:
        bool:
          must:
            - match:
                text: ${responseText}
  result: getResponsesResult
  next: mapResponsesData

getResponses:
  call: http.post
  args:
    url: http://host.docker.internal:9200/response/_search
  result: getResponsesResult

mapResponsesData:
  call: http.post
  args:
    url: http://host.docker.internal:3000/dmapper/get-responses
    body:
      hits: ${getResponsesResult.response.body.hits.hits}
  result: responsesData
  next: returnSuccess

returnSuccess:
  return: ${responsesData.response.body}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end
