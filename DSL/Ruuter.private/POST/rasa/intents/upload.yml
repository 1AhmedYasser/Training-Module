assign_values:
  assign:
    intentName: ${incoming.body.intentName.replaceAll(/\s+/g, "_")}
    file: ${incoming.body.file}

getIntentFile:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/rasa/intents/get-intent-file"
    body:
      intent: ${incoming.body.intentName}
  result: intentJson

convertIncomingCsvToJson:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/convert/csv-to-json"
    body:
      file: ${file}
  result: jsonData

mapCsvToArray:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]:[#TRAINING_DMAPPER_PORT]/dmapper/csv-examples-to-array"
    body:
      examples: ${jsonData.response.body}
  result: examplesFromCsv

checkIfExistingIntentEmpty:
  switch:
    - condition: ${intentJson.response.body.nlu[0] != undefined}
      next: assignExamples

assignEmptyExamples:
  assign:
    existingExamples: []
  next: checkIfExampleIsList

assignExamples:
  assign:
    existingExamples: intentJson.response.body.nlu[0].examples

checkIfExampleIsList:
  call: http.post
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]:[#TRAINING_PUBLIC_RUUTER_PORT]/rasa/intents/examples/add"
    body:
      intentName: ${intentJson.response}
      intentExamples: ${existingExamples}
      newExamples: ${examplesFromCsv.response.body}
  result: addResult

returnSuccess:
  return: ${addResult.response.body.response}
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end

