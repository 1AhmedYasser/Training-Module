assign_values:
  assign:
    form: ${incoming.body.form}

getResponses:
  call: http.get
  args:
    url: "[#TRAINING_PUBLIC_RUUTER]/rasa/responses"
#    headers:
#      cookie: ${incoming.headers.cookie}
  result: responses
  next: checkEntity

getForms:
  call: http.post
  args:
    url: "[#TRAINING_OPENSEARCH]/domain/_search?pretty=true"
    body:
      query:
        match:
          _id: 'forms'
  result: getFormsResult

assignResponse:
  assign:
    formsResponse: ${getFormsResult.response.body.hits.hits}

checkFormResponse:
  switch:
    - condition: ${formsResponse.length > 0}
      next: checkFormIsPresent
  next: returnNotFound

checkFormIsPresent:
  switch:
    - condition: ${Object.keys(formsResponse[0]._source.forms).includes(form)}
      next: mapFormsData
  next: returnNotFound

mapFormsData:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/get-form-details"
    body:
      name: ${slot}
      hits: ${slotResponse[0]._source.slots[slot]}
  result: slotsData
  next: returnSuccess

returnSuccess:
  return: ${slotsData.response.body.data}
  wrapper: false
  next: end

returnUnauthorized:
  return: "error: unauthorized"
  next: end

returnNotFound:
  return: "ERROR: form not found"
  next: end

checkEntity:
  call: http.post
  args:
    url: "[#TRAINING_DMAPPER]/dmapper/checkV"
    body:
      hits: ${responses.response.body}
    result: fileResult
  next: returnSuccess
